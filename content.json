{"pages":[],"posts":[{"title":"emqttd实现消息订阅、发布、退订","text":"1 前言springboot集成emqttd前请先安装和部署emqttd服务并进行简单的测试。 2 相关配置1、在pom文件下添加以下maven依赖：123456789101112&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-integration&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt; &lt;artifactId&gt;spring-integration-stream&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt; &lt;artifactId&gt;spring-integration-mqtt&lt;/artifactId&gt;&lt;/dependency&gt; 2、在.yml文件中进行mqtt的连接配置123456789spring: mqtt: username: admin # 账号，开启匿名连接后不需要填写账号和密码 password: public # 密码 host-url: tcp://ip:1883 # mqtt连接tcp地址 client-id: test # 客户端Id，每个启动的id要不同 default-topic: test # 默认主题 timeout: 100 # 超时时间 keepalive: 100 # 保持连接数 三、springboot-emqttd的整合1、获取配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109package com.qtone.study.mqtt;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.stereotype.Component;/** * @description: mqtt相关配置信息 * @author: fenghao * @date: 2020/3/23 **/@Component@ConfigurationProperties(\"spring.mqtt\")public class MqttConfig { @Autowired private MqttPushClient mqttPushClient; /** * 用户名 */ private String username; /** * 密码 */ private String password; /** * 连接地址ip+端口 */ private String hostUrl; /** * 客户端Id */ private String clientId; /** * 主题 */ private String defaultTopic; /** * 超时时间 */ private int timeout; /** * 保持连接数 */ private int keepalive; @Bean public MqttPushClient getMqttPushClient() { mqttPushClient.connect(hostUrl, clientId, username, password, timeout, keepalive); return mqttPushClient; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getHostUrl() { return hostUrl; } public void setHostUrl(String hostUrl) { this.hostUrl = hostUrl; } public String getClientId() { return clientId; } public void setClientId(String clientId) { this.clientId = clientId; } public String getDefaultTopic() { return defaultTopic; } public void setDefaultTopic(String defaultTopic) { this.defaultTopic = defaultTopic; } public int getTimeout() { return timeout; } public void setTimeout(int timeout) { this.timeout = timeout; } public int getKeepalive() { return keepalive; } public void setKeepalive(int keepalive) { this.keepalive = keepalive; }} 2、mqtt推送客户端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173package com.qtone.study.mqtt;import org.eclipse.paho.client.mqttv3.*;import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.concurrent.TimeUnit;/** * @description: mqtt推送客户端 * @author: fenghao * @date: 2020/3/23 **/@Componentpublic class MqttPushClient { private static final Logger logger = LoggerFactory.getLogger(MqttPushClient.class); @Autowired private PushCallback pushCallback; @Autowired private MqttConfig mqttConfig; private static MqttClient client; private static MqttClient getClient() { return client; } private static void setClient(MqttClient client) { MqttPushClient.client = client; } /** * @param: host ip+端口 * @param: clientID 客户端Id * @param: username 用户名 * @param: password 密码 * @param: timeout 超时时间 * @param: keepalive 保持连接数 * @description: 客户端连接 * @return: void * @date: 2020/3/23 */ public void connect(String host, String clientID, String username, String password, int timeout, int keepalive) { MqttClient client; try { client = new MqttClient(host, clientID, new MemoryPersistence()); MqttConnectOptions options = new MqttConnectOptions(); options.setCleanSession(false); options.setUserName(username); options.setPassword(password.toCharArray()); options.setConnectionTimeout(timeout); options.setKeepAliveInterval(keepalive); MqttPushClient.setClient(client); try { client.setCallback(pushCallback); client.connect(options); } catch (Exception e) { e.printStackTrace(); } } catch (Exception e) { e.printStackTrace(); } } /** * @param: topic * @param: pushMessage * @description: 推送，默认qos为0，非持久化 * @return: void * @date: 2020/3/23 */ public void publish(String topic,String pushMessage){ publish(0, false, topic, pushMessage); } /** * @param: qos 连接方式（0，1，2） * @param: retained 是否保留（boolean） * @param: topic 主题 * @param: pushMessage 消息体 * @description: 推送消息 * @return: void * @date: 2020/3/23 */ public void publish(int qos, boolean retained, String topic, String pushMessage) { MqttMessage message = new MqttMessage(); message.setQos(qos); message.setRetained(retained); message.setPayload(pushMessage.getBytes()); MqttTopic mTopic = MqttPushClient.getClient().getTopic(topic); if (null == mTopic) { logger.error(\"topic not exist\"); } MqttDeliveryToken token; try { token = mTopic.publish(message); token.waitForCompletion(); } catch (MqttPersistenceException e) { e.printStackTrace(); } catch (MqttException e) { e.printStackTrace(); } } /** * @param: topic * @description: 订阅某个主题，qos默认为0 * @return: void * @date: 2020/3/23 */ public void subscribe(String name,String topic){ logger.info(name +\"开始订阅主题\" + topic); subscribe(topic,2); } /** * @param: topic * @param: qos * @description: 订阅某个主题 * @return: void * @date: 2020/3/23 */ public void subscribe(String topic, int qos) { try { MqttPushClient.getClient().subscribe(topic, qos); } catch (MqttException e) { e.printStackTrace(); } } /** * @param: topic * @description: 取消订阅某个主题 * @return: void * @date: 2020/3/23 */ public void unSubscribe(String name,String topic) { logger.info(name +\"取消订阅主题\" + topic); try { MqttPushClient.getClient().unsubscribe(topic); } catch (MqttException e) { e.printStackTrace(); } } /** * @param: * @description: 重新连接 * @return: void * @date: 2020/3/27 */ public synchronized void startReconnect() { if (!client.isConnected()) { while (!client.isConnected()) { logger.info(\"mqtt开始尝试重连\"); try { TimeUnit.SECONDS.sleep(2); mqttConfig.getMqttPushClient(); logger.info(\"mqtt重连成功\"); break; } catch (Exception e) { logger.error(\"mqtt重连失败，继续重连中\"); } } } else { logger.info(\"mqtt已经连接，无需重连\"); } }} 3、 消费监听类1234567891011121314151617181920212223242526272829303132333435363738394041package com.qtone.study.mqtt;import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;import org.eclipse.paho.client.mqttv3.MqttCallback;import org.eclipse.paho.client.mqttv3.MqttMessage;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;/** * @description: 消费监听类 * @author: fenghao * @date: 2020/3/23 **/@Componentpublic class PushCallback implements MqttCallback { private static final Logger logger = LoggerFactory.getLogger(MqttPushClient.class); @Autowired private MqttPushClient mqttPushClient; @Override public void connectionLost(Throwable throwable) { // 连接丢失后，在这里进行重连 logger.error(\"连接断开，正在尝试重连 -&gt; \", throwable); mqttPushClient.startReconnect(); } @Override public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) { logger.info(\"消息发送成功 -&gt; \" + iMqttDeliveryToken.isComplete()); } @Override public void messageArrived(String topic, MqttMessage mqttMessage) throws Exception { logger.info(\"=======接收消息主题 : \" + topic); logger.info(\"=======接收消息Qos : \" + mqttMessage.getQos()); logger.info(\"=======接收消息内容 : \" + new String(mqttMessage.getPayload())); }} 4、 测试消息发布、订阅、退订1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.qtone.study.controller;import com.qtone.study.mqtt.MqttPushClient;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;/** * @description: 测试消息发布、订阅、退订 * @author: fenghao * @date: 2020/3/23 **/@Controller@RequestMapping(\"/\")public class TestController { @Autowired private MqttPushClient mqttPushClient; /** * @param: name * @param: topic * @description: 消息发布 * @return: java.lang.String * @date: 2020/4/2 */ @GetMapping(value = \"/publishTopic\") public String publishTopic(final String name,final String topic){ mqttPushClient.subscribe(name,topic); System.out.println(\"================name : \"+name); for(int i =1;i&lt;=10;i++) { mqttPushClient.publish(2,false,topic, \"测试name: \" + name + \"推送第\" + i + \"条消息\"); } return \"ok\"; } /** * @param: name * @param: topic * @description: 消息订阅 * @return: java.lang.String * @date: 2020/4/2 */ @GetMapping(value = \"/subscribe\") public String subscribe(String name,String topic) { mqttPushClient.subscribe(name,topic); return \"ok\"; } /** * @param: name * @param: topic * @description: 消息退订 * @return: java.lang.String * @date: 2020/4/2 */ @GetMapping(value = \"/unSubscribe\") public String unSubscribe(String name,String topic) { mqttPushClient.unSubscribe(name,topic); return \"ok\"; }} 3 测试成果1、进入后台连接服务器 2、订阅“test/test”主题 3、接口发送相关信息进行测试（http://127.0.0.1:8080/publishTopic?name=qtone&amp;topic=test/test） 4、后台接收到相应的信息 此时项目中的客户端也订阅了test/test下的主题，因此也会收到相应的消息。 更多详细信息：EMQ X 中文文档 EMQ X企业版中文文档","link":"/2020/04/02/emqttd%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E3%80%81%E5%8F%91%E5%B8%83%E3%80%81%E9%80%80%E8%AE%A2/"},{"title":"emqttd服务搭建","text":"1 前言EMQ X (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。Erlang/OTP 是出色的软实时 (Soft-Realtime)、低延时 (Low-Latency)、分布式 (Distributed) 的语言平台。MQTT 是轻量的 (Lightweight)、发布订阅模式 (PubSub) 的物联网消息协议。 EMQ X 面向海量的 移动 / 物联网 / 车载 等终端接入，并实现在海量物理网设备间快速低延时的消息路由: 稳定承载大规模的 MQTT 客户端连接，单服务器节点支持百万连接。 分布式节点集群，快速低延时的消息路由，单集群支持千万规模的路由。 消息服务器内扩展，支持定制多种认证方式、高效存储消息到后端数据库。 完整物联网协议支持，MQTT、MQTT-SN、CoAP、LwM2M、私有 TCP/UDP 协议支持。 2 安装和部署1、从emqx中下载适合自己的稳定版本的emqttd； 2、将下载的压缩包解压； 1[root@localhost test]# unzip emqttd-centos7-v3.2.3.zip 3、cd进入到emqttd/etc/目录，修改emq.conf的参数，如下几项去掉注释，修改如下： 1234567listener.tcp.internal.rate_limit = 100000,10000 //内部连接带宽迸发数 和平均数 （KB）listener.tcp.external.rate_limit = 100000,10000 //外部连接带宽迸发数 和平均数 （KB）log.syslog.level = debug //系统日志级别 log.console = file //console 日志指向文件log.console.size = 10485760 //console 日志文件大小log.console.count = 10 //console 日志回滚大小 mqtt.allow_anonymous = false //不开启匿名 4、cd进入到emqttd/bin目录下，控制台调试模式启动，检查emqttd是否可正常启动； 12[root@localhost test]# cd emqttd/bin/[root@localhost bin]# ./emqttd console 启动成功后会有如下打印： 1234567891011121314151617181920212223242526272829starting emqttd on node 'emq@127.0.0.1'emqttd ctl is starting...[ok]emqttd hook is starting...[ok]emqttd router is starting...[ok]emqttd pubsub is starting...[ok]emqttd stats is starting...[ok]emqttd metrics is starting...[ok]emqttd pooler is starting...[ok]emqttd trace is starting...[ok]emqttd client manager is starting...[ok]emqttd session manager is starting...[ok]emqttd session supervisor is starting...[ok]emqttd wsclient supervisor is starting...[ok]emqttd broker is starting...[ok]emqttd alarm is starting...[ok]emqttd mod supervisor is starting...[ok]emqttd bridge supervisor is starting...[ok]emqttd access control is starting...[ok]emqttd system monitor is starting...[ok]emqttd 3.2.3 is running nowEshell V9.0 (abort with ^G)(emq@127.0.0.1)1&gt; Load emq_mod_presence module successfully.dashboard:http listen on 0.0.0.0:18083 with 4 acceptors.mqtt:tcp listen on 127.0.0.1:11883 with 4 acceptors.mqtt:tcp listen on 0.0.0.0:1883 with 16 acceptors.mqtt:ws listen on 0.0.0.0:8083 with 4 acceptors.mqtt:ssl listen on 0.0.0.0:8883 with 16 acceptors.mqtt:wss listen on 0.0.0.0:8084 with 4 acceptors.mqtt:api listen on 0.0.0.0:8080 with 4 acceptors. 5、Ctrl+c关闭控制台，使用守护进程模式启动： 12[root@localhost bin]# ./emqttd startemqttd 2.3.11 is started successfully! 6、查看运行状态： 123[root@localhost bin]# ./emqttd_ctl statusNode 'emq@127.0.0.1' is startedemqttd 3.2.3 is running 7、停止服务器： 12[root@localhost bin]# ./emqttd stopok 3 管理emqttd消息服务器启动后，会默认加载Dashboard插件，启动Web管理控制台。用户可通过Web控制台， 查看服务器运行状态、统计数据、客户端(Client)、会话(Session)、主题(Topic)、订阅(Subscription)。控制台地址: http://127.0.0.1:18083，默认用户: admin，密码：public （127.0.0.1需要修改为自己本机部署的服务器地址） 更多详细信息：EMQ X 中文文档 EMQ X企业版中文文档","link":"/2020/04/02/emqttd%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"},{"title":"git-api","text":"Git基础API架构速记图","link":"/2020/04/08/git-api/"},{"title":"小白初入Hexo","text":"1 前言使用github + hexo搭建个人博客，需要进行一定的步骤： 安装Git 安装Node.js 安装Hexo GitHub创建个人仓库 生成SSH添加到GitHub 将hexo部署到GitHub 更换主题 发布文章 hexo常用命令 2 搭建hexo博客2.1 安装GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 windows：到git官网上进行下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。 linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码 1sudo apt-get install git 安装好后，用git -version 来查看一下版本 2.2 安装node.jsHexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。 windows：node.js选择LTS版本就行了。 linux： 12sudo apt-get install nodejssudo apt-get install npm 安装完后，打开命令行 12node -vnpm -v 检查一下有没有安装成功 顺便提醒一下，windows在git安装完后，就可以直接使用git bash来敲命令行了。 2.3 安装hexo前面git和node.js安装好后，就可以安装hexo了，你可以先创建一个文件夹floder，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 输入命令 1npm install -g hexo-cli 依旧用hexo -v查看一下版本 至此就全部安装完了。 接下来初始化一下hexo 1hexo init “floder” 这个floder可以自己取什么名字都行，然后 12cd “floder” //进入文件夹npm install 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 ** _config.yml: 博客的配置文件** 12hexo generate //简化hexo ghexo server //简化hexo s 打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了（由于刚开始没有主题或index.html，出现白屏属于正常现象），使用ctrl+c可以把服务关掉。 2.4 GitHub创建个人仓库首先，你先要有一个GitHub账户，去注册一个吧。 注册完登录后，在GitHub.com中看到一个New repository，新建仓库。 创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是http://yourname.github.io，其中yourname就是你注册GitHub的用户名。 点击create repository。 2.5 生成SSH添加到GitHub回到你的git bash中， 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。 可以用以下两条，检查一下你有没有输对 12git config user.namegit config user.email 然后创建SSH,连续三次回车 1ssh-keygen -t rsa -C &quot;youremail&quot; 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的id_rsa.pub里面的信息复制进去。 在gitbash中，查看是否成功 1ssh -T git@github.com 2.6 将hexo部署到GitHub这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为 YourgithubName就是你的GitHub账户 1234deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 1npm install hexo-deployer-git --save 然后 123hexo cleanhexo generatehexo deploy 其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写 hexo deploy 部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了！！ 2.7 更换主题这里我们首先要下载主题，推荐一种我是用的主题icarus（hexo-theme-icarus） 页面预览： 将文件下载解压后放到hexo项目中的themes文件夹里。 现在需要更改配置文件，首先要知道在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：F:\\IDEA\\gitProject\\blog\\myblog_config.yml），主要包含 Hexo 本身整站的配置；另一份位于主题目录（F:\\IDEA\\gitProject\\blog\\myblog\\themes\\icarus_config.yml）下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件。下面我们先来看看站点配置文件的配置修改。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site#主页标题title: 程序员的江湖#副标题subtitle: 'xx的博客'# 网站描述description: '互联网行业新知，终身学习践行者'keywords:#作者，左下角显示author: 姓名#设置头像avatar: /images/xx.jpg#语言language: zh-CNtimezone: ''# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'#填自己的github pages网址url: http://yourname.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: enable: true # Open external links in new tab field: site # Apply to the whole site exclude: ''filename_case: 0render_drafts: falsepost_asset_folder: false #发布图片需要改为true，后面有说明relative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace: '' wrap: true hljs: false# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## Use post's date for updated date unless set in front-matteruse_date_for_updated: false# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Include / Exclude file(s)## include:/exclude: options only apply to the 'source/' folderinclude:exclude:ignore:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/# 主题切换（在themes文件夹里）theme: icarus# Deployment## Docs: https://hexo.io/docs/deployment.html#自己的仓库deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master 下面是icarus的主题配置文件.config_xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260# Version of the Icarus theme that is currently usedversion: 2.6.0# Path or URL to the website's iconfavicon: /images/favicon.svg# Additional HTML meta tags in an array.meta: # canonical_url of your sitecanonical_url: # language# Path or URL to RSS atom.xmlrss: # Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/logo.svg# Open Graph metadata# https://hexo.io/docs/helpers.html#open-graphopen_graph: # Facebook App ID fb_app_id: # Facebook Admin ID fb_admins: # Twitter ID twitter_id: # Twitter site twitter_site: # Google+ profile link google_plus: # Navigation bar link settingsnavbar: # Navigation bar menu links menu: 主页: / 归档: /archives 分类: /categories 标签: /tags 关于: /about # Navigation bar links to be shown on the right links: Download on GitHub: icon: fab fa-github url: 'https://github.com/ppoffice/hexo-theme-icarus'# Footer section link settingsfooter: # Links to be shown on the right of the footer section links: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution 4.0 International: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' Download on GitHub: icon: fab fa-github url: 'https://github.com/yourname'# Article display settingsarticle: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-light # Show code copying button clipboard: true # Default folding status of the code blocks. Can be \"\", \"folded\", \"unfolded\" fold: unfolded # Whether to show article thumbnail images thumbnail: true # Whether to show estimate article reading time readtime: true# Search plugin settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Searchsearch: # Name of the search plugin type: insight# Comment plugin settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Commentcomment: # Name of the comment plugin type: valine enable: true app_id: xxx app_key: xxx notify: false verify: false avatar: \"mm\" placeholder: 要不要说点啥... shortname: # Donation entries# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donationdonate: - # Donation entry name type: alipay # Qrcode image URL支付宝二维码 qrcode: '/images/xxx.jpg' - # Donation entry name type: wechat # Qrcode image URL微信二维码 qrcode: '/images/xxx.jpg'# Share plugin settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Shareshare: # Share plugin name type: sharejs # Sidebar settings.# Please be noted that a sidebar is only visible when it has at least one widgetsidebar: # left sidebar settings left: # Whether the left sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false # right sidebar settings right: # Whether the right sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false# Sidebar widget settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: 姓名 # Title of the author to be shown in the profile widget author_title: Java软件开发工程师 # Author's current location to be shown in the profile widget location: 陕西 西安 # Path or URL to the avatar to be shown in the profile widget avatar: /images/fh.jpg # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: false # Path or URL for the follow button follow_link: 'https://github.com/yourname' # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: 'https://github.com/yourname' Facebook: icon: fab fa-facebook url: 'https://facebook.com' Twitter: icon: fab fa-twitter url: 'https://twitter.com' Dribbble: icon: fab fa-dribbble url: 'https://dribbble.com' RSS: icon: fas fa-rss url: / - # Widget name type: toc # Where should the widget be placed, left or right position: left - # Widget name type: links # Where should the widget be placed, left or right position: left # Links to be shown in the links widget links: Hexo: 'https://hexo.io' PPOffice: 'https://github.com/ppoffice' - # Widget name type: category # Where should the widget be placed, left or right position: left - # Widget name type: tagcloud # Where should the widget be placed, left or right position: left - # Widget name type: recent_posts # Where should the widget be placed, left or right position: right - # Widget name type: archive # Where should the widget be placed, left or right position: right - # Widget name type: tag # Where should the widget be placed, left or right position: right# Other plugin settingsplugins: # Enable page animations animejs: true # Enable the lightGallery and Justified Gallery plugins # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/gallery-plugin/ gallery: true # Enable the Outdated Browser plugin # http://outdatedbrowser.com/ outdated-browser: true # Enable the MathJax plugin # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/mathjax-plugin/ mathjax: true # Show the back to top button on mobile devices back-to-top: true # Google Analytics plugin settings # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Google-Analytics google-analytics: # Google Analytics tracking id tracking_id: # Baidu Analytics plugin settings # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Baidu-Analytics baidu-analytics: # Baidu Analytics tracking id tracking_id: # Hotjar user feedback plugin # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Hotjar hotjar: # Hotjar site id site_id: # Show a loading progress bar at top of the page progressbar: true # BuSuanZi site/page view counter # https://busuanzi.ibruce.info busuanzi: truebusuanzi: enable: true# CDN provider settings# https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: 访客数 site_uv_footer: 人 # custom pv span for the whole site site_pv: true site_pv_header: 总访问量 site_pv_footer: 次 # custom pv span for one page only page_pv: true page_pv_header: &lt;i class=\"fa fa-file-o\"&gt;&lt;/i&gt; 阅读数 page_pv_footer:# CDN provider settings# https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/providers: # Name or URL of the JavaScript and/or stylesheet CDN provider cdn: jsdelivr # Name or URL of the webfont CDN provider fontcdn: google # Name or URL of the webfont Icon CDN provider iconcdn: fontawesome 效果预览： 2.8 发布文章定位到我们的hexo根目录，执行命令： 1hexo new 'myblog' hexo会帮我们在_posts下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。 一般完整格式如下： 12345678---title: postName #文章页面上的显示名称，一般是中文date: 2020-04-01 9:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文 那么hexo new page ‘postName’命令和hexo new ‘postName’有什么区别呢？ 1hexo new page \"myblog1\" 生成如下： 最终部署时生成：hexo\\public\\myblog1\\index.html，但是它不会作为文章出现在博文目录。 如果文章中有图片呢？ 安装图片插件 1npm install hexo-asset-image --save 在根目录_config.yml配置文件中，修改为 post_asset_folder: true。新建文章blog时，这个时候会生成一个blog.md 和 blog的文件夹 12345themes _posts #文章目录 blog #blog页面中的图片 aaa.jpg #页面图片 blog.md #blog页面 然后就可以在文章中引用了图片了，比如：aaa.jpg文章中的引用方法是 1{% asset_img aaa.jpg 图片描述 %} 这样图片显示就ok了，当然也可以存到云上呦！ 默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上即可，例如： 12345678910# 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等； 123hexo ghexo shexo d 部署上去后访问，效果如下 2.9 hexo常用命令常见命令 1234567hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 缩写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令： 12hexo s -g #生成并本地预览hexo d -g #生成并上传 到这hexo博客基本使用就已经OK了，博客中畅游吧，老铁！","link":"/2020/03/31/%E5%B0%8F%E7%99%BD%E5%88%9D%E5%85%A5Hexo/"},{"title":"第一个帖子","text":"欢迎来到Hexo！这是你的第一个帖子。查看文档了解更多信息。如果在使用Hexo时遇到任何问题，可以在疑难解答中找到答案，也可以在GitHub上询问我。 快速启动创建新帖子1$ hexo new \"My New Post\" 更多信息: Writing 运行服务器1$ hexo server 更多信息: Server 生成静态文件1$ hexo generate 更多信息: Generating 部署到远程仓库1$ hexo deploy 更多信息: Deployment","link":"/2020/03/31/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B8%96%E5%AD%90/"}],"tags":[{"name":"emqttd","slug":"emqttd","link":"/tags/emqttd/"},{"name":"emqttd搭建","slug":"emqttd搭建","link":"/tags/emqttd%E6%90%AD%E5%BB%BA/"},{"name":"Git-api","slug":"Git-api","link":"/tags/Git-api/"},{"name":"hexo搭建，博客","slug":"hexo搭建，博客","link":"/tags/hexo%E6%90%AD%E5%BB%BA%EF%BC%8C%E5%8D%9A%E5%AE%A2/"}],"categories":[{"name":"springboot","slug":"springboot","link":"/categories/springboot/"},{"name":"搭建","slug":"搭建","link":"/categories/%E6%90%AD%E5%BB%BA/"},{"name":"Git","slug":"Git","link":"/categories/Git/"}]}