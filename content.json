{"pages":[],"posts":[{"title":"git-api","text":"Git基础API架构速记图","link":"/2020/04/08/git-api/"},{"title":"emqttd实现消息订阅、发布、退订","text":"1 前言springboot集成emqttd前请先安装和部署emqttd服务并进行简单的测试。 2 相关配置1、在pom文件下添加以下maven依赖：123456789101112&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-integration&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt; &lt;artifactId&gt;spring-integration-stream&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt; &lt;artifactId&gt;spring-integration-mqtt&lt;/artifactId&gt;&lt;/dependency&gt; 2、在.yml文件中进行mqtt的连接配置123456789spring: mqtt: username: admin # 账号，开启匿名连接后不需要填写账号和密码 password: public # 密码 host-url: tcp://ip:1883 # mqtt连接tcp地址 client-id: test # 客户端Id，每个启动的id要不同 default-topic: test # 默认主题 timeout: 100 # 超时时间 keepalive: 100 # 保持连接数 三、springboot-emqttd的整合1、获取配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109package com.qtone.study.mqtt;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.stereotype.Component;/** * @description: mqtt相关配置信息 * @author: fenghao * @date: 2020/3/23 **/@Component@ConfigurationProperties(\"spring.mqtt\")public class MqttConfig { @Autowired private MqttPushClient mqttPushClient; /** * 用户名 */ private String username; /** * 密码 */ private String password; /** * 连接地址ip+端口 */ private String hostUrl; /** * 客户端Id */ private String clientId; /** * 主题 */ private String defaultTopic; /** * 超时时间 */ private int timeout; /** * 保持连接数 */ private int keepalive; @Bean public MqttPushClient getMqttPushClient() { mqttPushClient.connect(hostUrl, clientId, username, password, timeout, keepalive); return mqttPushClient; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getHostUrl() { return hostUrl; } public void setHostUrl(String hostUrl) { this.hostUrl = hostUrl; } public String getClientId() { return clientId; } public void setClientId(String clientId) { this.clientId = clientId; } public String getDefaultTopic() { return defaultTopic; } public void setDefaultTopic(String defaultTopic) { this.defaultTopic = defaultTopic; } public int getTimeout() { return timeout; } public void setTimeout(int timeout) { this.timeout = timeout; } public int getKeepalive() { return keepalive; } public void setKeepalive(int keepalive) { this.keepalive = keepalive; }} 2、mqtt推送客户端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173package com.qtone.study.mqtt;import org.eclipse.paho.client.mqttv3.*;import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.concurrent.TimeUnit;/** * @description: mqtt推送客户端 * @author: fenghao * @date: 2020/3/23 **/@Componentpublic class MqttPushClient { private static final Logger logger = LoggerFactory.getLogger(MqttPushClient.class); @Autowired private PushCallback pushCallback; @Autowired private MqttConfig mqttConfig; private static MqttClient client; private static MqttClient getClient() { return client; } private static void setClient(MqttClient client) { MqttPushClient.client = client; } /** * @param: host ip+端口 * @param: clientID 客户端Id * @param: username 用户名 * @param: password 密码 * @param: timeout 超时时间 * @param: keepalive 保持连接数 * @description: 客户端连接 * @return: void * @date: 2020/3/23 */ public void connect(String host, String clientID, String username, String password, int timeout, int keepalive) { MqttClient client; try { client = new MqttClient(host, clientID, new MemoryPersistence()); MqttConnectOptions options = new MqttConnectOptions(); options.setCleanSession(false); options.setUserName(username); options.setPassword(password.toCharArray()); options.setConnectionTimeout(timeout); options.setKeepAliveInterval(keepalive); MqttPushClient.setClient(client); try { client.setCallback(pushCallback); client.connect(options); } catch (Exception e) { e.printStackTrace(); } } catch (Exception e) { e.printStackTrace(); } } /** * @param: topic * @param: pushMessage * @description: 推送，默认qos为0，非持久化 * @return: void * @date: 2020/3/23 */ public void publish(String topic,String pushMessage){ publish(0, false, topic, pushMessage); } /** * @param: qos 连接方式（0，1，2） * @param: retained 是否保留（boolean） * @param: topic 主题 * @param: pushMessage 消息体 * @description: 推送消息 * @return: void * @date: 2020/3/23 */ public void publish(int qos, boolean retained, String topic, String pushMessage) { MqttMessage message = new MqttMessage(); message.setQos(qos); message.setRetained(retained); message.setPayload(pushMessage.getBytes()); MqttTopic mTopic = MqttPushClient.getClient().getTopic(topic); if (null == mTopic) { logger.error(\"topic not exist\"); } MqttDeliveryToken token; try { token = mTopic.publish(message); token.waitForCompletion(); } catch (MqttPersistenceException e) { e.printStackTrace(); } catch (MqttException e) { e.printStackTrace(); } } /** * @param: topic * @description: 订阅某个主题，qos默认为0 * @return: void * @date: 2020/3/23 */ public void subscribe(String name,String topic){ logger.info(name +\"开始订阅主题\" + topic); subscribe(topic,2); } /** * @param: topic * @param: qos * @description: 订阅某个主题 * @return: void * @date: 2020/3/23 */ public void subscribe(String topic, int qos) { try { MqttPushClient.getClient().subscribe(topic, qos); } catch (MqttException e) { e.printStackTrace(); } } /** * @param: topic * @description: 取消订阅某个主题 * @return: void * @date: 2020/3/23 */ public void unSubscribe(String name,String topic) { logger.info(name +\"取消订阅主题\" + topic); try { MqttPushClient.getClient().unsubscribe(topic); } catch (MqttException e) { e.printStackTrace(); } } /** * @param: * @description: 重新连接 * @return: void * @date: 2020/3/27 */ public synchronized void startReconnect() { if (!client.isConnected()) { while (!client.isConnected()) { logger.info(\"mqtt开始尝试重连\"); try { TimeUnit.SECONDS.sleep(2); mqttConfig.getMqttPushClient(); logger.info(\"mqtt重连成功\"); break; } catch (Exception e) { logger.error(\"mqtt重连失败，继续重连中\"); } } } else { logger.info(\"mqtt已经连接，无需重连\"); } }} 3、 消费监听类1234567891011121314151617181920212223242526272829303132333435363738394041package com.qtone.study.mqtt;import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;import org.eclipse.paho.client.mqttv3.MqttCallback;import org.eclipse.paho.client.mqttv3.MqttMessage;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;/** * @description: 消费监听类 * @author: fenghao * @date: 2020/3/23 **/@Componentpublic class PushCallback implements MqttCallback { private static final Logger logger = LoggerFactory.getLogger(MqttPushClient.class); @Autowired private MqttPushClient mqttPushClient; @Override public void connectionLost(Throwable throwable) { // 连接丢失后，在这里进行重连 logger.error(\"连接断开，正在尝试重连 -&gt; \", throwable); mqttPushClient.startReconnect(); } @Override public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) { logger.info(\"消息发送成功 -&gt; \" + iMqttDeliveryToken.isComplete()); } @Override public void messageArrived(String topic, MqttMessage mqttMessage) throws Exception { logger.info(\"=======接收消息主题 : \" + topic); logger.info(\"=======接收消息Qos : \" + mqttMessage.getQos()); logger.info(\"=======接收消息内容 : \" + new String(mqttMessage.getPayload())); }} 4、 测试消息发布、订阅、退订1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.qtone.study.controller;import com.qtone.study.mqtt.MqttPushClient;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;/** * @description: 测试消息发布、订阅、退订 * @author: fenghao * @date: 2020/3/23 **/@Controller@RequestMapping(\"/\")public class TestController { @Autowired private MqttPushClient mqttPushClient; /** * @param: name * @param: topic * @description: 消息发布 * @return: java.lang.String * @date: 2020/4/2 */ @GetMapping(value = \"/publishTopic\") public String publishTopic(final String name,final String topic){ mqttPushClient.subscribe(name,topic); System.out.println(\"================name : \"+name); for(int i =1;i&lt;=10;i++) { mqttPushClient.publish(2,false,topic, \"测试name: \" + name + \"推送第\" + i + \"条消息\"); } return \"ok\"; } /** * @param: name * @param: topic * @description: 消息订阅 * @return: java.lang.String * @date: 2020/4/2 */ @GetMapping(value = \"/subscribe\") public String subscribe(String name,String topic) { mqttPushClient.subscribe(name,topic); return \"ok\"; } /** * @param: name * @param: topic * @description: 消息退订 * @return: java.lang.String * @date: 2020/4/2 */ @GetMapping(value = \"/unSubscribe\") public String unSubscribe(String name,String topic) { mqttPushClient.unSubscribe(name,topic); return \"ok\"; }} 3 测试成果1、进入后台连接服务器 2、订阅“test/test”主题 3、接口发送相关信息进行测试（http://127.0.0.1:8080/publishTopic?name=qtone&amp;topic=test/test） 4、后台接收到相应的信息 此时项目中的客户端也订阅了test/test下的主题，因此也会收到相应的消息。 更多详细信息：EMQ X 中文文档 EMQ X企业版中文文档","link":"/2020/04/02/emqttd%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E3%80%81%E5%8F%91%E5%B8%83%E3%80%81%E9%80%80%E8%AE%A2/"},{"title":"emqttd服务搭建","text":"1 前言EMQ X (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。Erlang/OTP 是出色的软实时 (Soft-Realtime)、低延时 (Low-Latency)、分布式 (Distributed) 的语言平台。MQTT 是轻量的 (Lightweight)、发布订阅模式 (PubSub) 的物联网消息协议。 EMQ X 面向海量的 移动 / 物联网 / 车载 等终端接入，并实现在海量物理网设备间快速低延时的消息路由: 稳定承载大规模的 MQTT 客户端连接，单服务器节点支持百万连接。 分布式节点集群，快速低延时的消息路由，单集群支持千万规模的路由。 消息服务器内扩展，支持定制多种认证方式、高效存储消息到后端数据库。 完整物联网协议支持，MQTT、MQTT-SN、CoAP、LwM2M、私有 TCP/UDP 协议支持。 2 安装和部署1、从emqx中下载适合自己的稳定版本的emqttd； 2、将下载的压缩包解压； 1[root@localhost test]# unzip emqttd-centos7-v3.2.3.zip 3、cd进入到emqttd/etc/目录，修改emq.conf的参数，如下几项去掉注释，修改如下： 1234567listener.tcp.internal.rate_limit = 100000,10000 //内部连接带宽迸发数 和平均数 （KB）listener.tcp.external.rate_limit = 100000,10000 //外部连接带宽迸发数 和平均数 （KB）log.syslog.level = debug //系统日志级别 log.console = file //console 日志指向文件log.console.size = 10485760 //console 日志文件大小log.console.count = 10 //console 日志回滚大小 mqtt.allow_anonymous = false //不开启匿名 4、cd进入到emqttd/bin目录下，控制台调试模式启动，检查emqttd是否可正常启动； 12[root@localhost test]# cd emqttd/bin/[root@localhost bin]# ./emqttd console 启动成功后会有如下打印： 1234567891011121314151617181920212223242526272829starting emqttd on node 'emq@127.0.0.1'emqttd ctl is starting...[ok]emqttd hook is starting...[ok]emqttd router is starting...[ok]emqttd pubsub is starting...[ok]emqttd stats is starting...[ok]emqttd metrics is starting...[ok]emqttd pooler is starting...[ok]emqttd trace is starting...[ok]emqttd client manager is starting...[ok]emqttd session manager is starting...[ok]emqttd session supervisor is starting...[ok]emqttd wsclient supervisor is starting...[ok]emqttd broker is starting...[ok]emqttd alarm is starting...[ok]emqttd mod supervisor is starting...[ok]emqttd bridge supervisor is starting...[ok]emqttd access control is starting...[ok]emqttd system monitor is starting...[ok]emqttd 3.2.3 is running nowEshell V9.0 (abort with ^G)(emq@127.0.0.1)1&gt; Load emq_mod_presence module successfully.dashboard:http listen on 0.0.0.0:18083 with 4 acceptors.mqtt:tcp listen on 127.0.0.1:11883 with 4 acceptors.mqtt:tcp listen on 0.0.0.0:1883 with 16 acceptors.mqtt:ws listen on 0.0.0.0:8083 with 4 acceptors.mqtt:ssl listen on 0.0.0.0:8883 with 16 acceptors.mqtt:wss listen on 0.0.0.0:8084 with 4 acceptors.mqtt:api listen on 0.0.0.0:8080 with 4 acceptors. 5、Ctrl+c关闭控制台，使用守护进程模式启动： 12[root@localhost bin]# ./emqttd startemqttd 2.3.11 is started successfully! 6、查看运行状态： 123[root@localhost bin]# ./emqttd_ctl statusNode 'emq@127.0.0.1' is startedemqttd 3.2.3 is running 7、停止服务器： 12[root@localhost bin]# ./emqttd stopok 3 管理emqttd消息服务器启动后，会默认加载Dashboard插件，启动Web管理控制台。用户可通过Web控制台， 查看服务器运行状态、统计数据、客户端(Client)、会话(Session)、主题(Topic)、订阅(Subscription)。控制台地址: http://127.0.0.1:18083，默认用户: admin，密码：public （127.0.0.1需要修改为自己本机部署的服务器地址） 更多详细信息：EMQ X 中文文档 EMQ X企业版中文文档","link":"/2020/04/02/emqttd%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"},{"title":"人脸识别离线SDK整合系统（虹软）","text":"1 前言整合人脸识别实现刷脸登录，需要进行一定的步骤： 下载离线SDK 相关配置 后端代码逻辑 前端界面展示 测试 2 整合人脸识别2.1 下载离线SDKArcFace 3.0 免费离线人脸识别SDK：独立离线版SDK，拥有人脸检测、人脸对比、人证比对、人脸跟踪等功能。 进入ArcFace开发平台下载适合自己系统的免费离线SDK，免费版和增值版区别如下图 2.2 相关配置作者下载的windows64版本的，下载解压后文件目录如下 123456789ArcFace doc ARCSOFT_ARC_FACE_JAVA_DEVELOPER'S_GUIDE.pdf //开发文档 libs WIN64 ... //引擎文件 arcsoft-sdk-face-3.0.0.0.jar //jar包 samplecode FaceEngineTest.java //测试类 还需要在ArFace上获取appId和sdkKey，如下图 将jar包导入自己的项目。 将解压文件保存到合适的地方。 2.3 后端代码逻辑UserAction.java：面部信息录入方法和登录方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071/** * 录入面部信息 * @return */public String addFace() { User users = (User) ServletActionContext.getRequest().getSession().getAttribute(\"user\"); if(!users.getLoginPwd().equals(MD5Utils.md5(user.getLoginPwd()))){ jsonData.put(\"code\", 100); }else{ int isFace = FacesUtil.findFace(user.getFaceImg()); if(isFace == 2){ String faceImg = BaseData.baseData(user.getFaceImg()); user.setFaceImg(faceImg); userService.addFace(user); if(users.getFaceImg() != null){ File file = new File(\"F:\\\\IDEA\\\\workspace\\\\wanjia\\\\src\\\\main\\\\webapp\\\\upload\\\\faceimg\\\\\"+users.getFaceImg()); file.delete(); users.setFaceImg(faceImg); ServletActionContext.getRequest().getSession().setAttribute(\"user\", users); } jsonData.put(\"code\", 200); }else if(isFace == 1) { jsonData.put(\"code\", 300); }else { jsonData.put(\"code\", 400); } } return \"addFace\"; }/** * 用户登录的方法 * @return */public String jsonLogin() { if(user.getFaceImg() == null){ user = userService.login(user); }else{ int isFace = FacesUtil.findFace(user.getFaceImg()); if(isFace == 2){ List&lt;User&gt; userList = userService.findUserAll(); user = FacesUtil.faces(user.getFaceImg() ,userList); }else if(isFace == 1) { jsonData.put(\"code\", 300); return \"jsonLogin\"; }else { jsonData.put(\"code\", 400); return \"jsonLogin\"; } } ServletActionContext.getRequest().getSession().setAttribute(\"user\", user); if(user!=null) { DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Orders.class); jsonData.put(\"code\", 200); if(user.getUserType().getUserTypeId()==3) { jsonData.put(\"type\", 3); }else if(user.getUserType().getUserTypeId()==2){ detachedCriteria.createAlias(\"house\",\"h\" ).add(Restrictions.eq(\"h.user.userId\", user.getUserId())); jsonData.put(\"type\", 2); }else { detachedCriteria.add(Restrictions.eq(\"user.userId\",user.getUserId())); jsonData.put(\"type\", 1); } jsonData.put(\"data\", user); boolean flag= orderService.showOrder(detachedCriteria); if(flag){ jsonData.put(\"info\", 100); } } return \"jsonLogin\"; } BaseData.java:后端接受的img信息是BASE64码，需要进行解码。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.wanjia.utils;import sun.misc.BASE64Decoder;import java.io.FileOutputStream;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;/** * @description: BASE64解码 * @author: fenghao * @date: 2020/4/10 **/public class BaseData { public static String baseData(String img){ byte[] bytes = FacesUtil.baseData(img); //字节流转文件 FileOutputStream fos = null; String imgpath = reName(); String name =\"F:\\\\IDEA\\\\workspace\\\\wanjia\\\\src\\\\main\\\\webapp\\\\upload\\\\faceimg\\\\\"+imgpath; try { fos = new FileOutputStream(name); fos.write(bytes); } catch ( IOException e) { e.printStackTrace(); } finally { if (fos != null){ try { fos.close(); } catch (IOException e) { e.printStackTrace(); } } } return imgpath; } public static String reName() { String format= new SimpleDateFormat(\"yyyyMMddHHmmSS\").format(new Date()); int num = (int)(Math.random() * (999999 - 100000) + 100000); return format+num+\".jpg\"; }} FaceUtil.java:人脸比对工具类package com.wanjia.utils;import com.arcsoft.face.*;import com.arcsoft.face.enums.DetectMode;import com.arcsoft.face.enums.DetectOrient;import com.arcsoft.face.enums.ErrorInfo;import com.arcsoft.face.toolkit.ImageInfo;import com.wanjia.domain.User;import org.springframework.stereotype.Service;import sun.misc.BASE64Decoder;import javax.annotation.PostConstruct;import javax.annotation.PreDestroy;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;import static com.arcsoft.face.toolkit.ImageFactory.getRGBData;/** * @description: 人脸比对工具类 * @author: fenghao * @date: 2020/4/9 **/@Servicepublic class FacesUtil { private static String libPath = \"\"; //刚官网下在的libs\\WIN64里的引擎文件 private static String appId = \"\"; //官网获得的appId private static String sdkKey = \"\"; //官网获得的sdkKey private static int errorCode; private static FaceEngine faceEngine; private static ImageInfo imageInfo; private static List&lt;FaceInfo&gt; faceInfoList = new ArrayList&lt;FaceInfo&gt;(); /** * @param: * @description: 初始化引擎，项目启动时加载 * @return: void * @date: 2020/4/24 */ @PostConstruct public static void initEngine() { faceEngine = new FaceEngine(libPath); //激活引擎 errorCode = faceEngine.activeOnline(appId, sdkKey); if (errorCode != ErrorInfo.MOK.getValue() &amp;&amp; errorCode != ErrorInfo.MERR_ASF_ALREADY_ACTIVATED.getValue()) { System.out.println(\"引擎激活失败\"); } ActiveFileInfo activeFileInfo = new ActiveFileInfo(); errorCode = faceEngine.getActiveFileInfo(activeFileInfo); if (errorCode != ErrorInfo.MOK.getValue() &amp;&amp; errorCode != ErrorInfo.MERR_ASF_ALREADY_ACTIVATED.getValue()) { System.out.println(\"获取激活文件信息失败\"); } //引擎配置 EngineConfiguration engineConfiguration = new EngineConfiguration(); engineConfiguration.setDetectMode(DetectMode.ASF_DETECT_MODE_IMAGE); engineConfiguration.setDetectFaceOrientPriority(DetectOrient.ASF_OP_ALL_OUT); engineConfiguration.setDetectFaceMaxNum(10); engineConfiguration.setDetectFaceScaleVal(16); //功能配置 FunctionConfiguration functionConfiguration = new FunctionConfiguration(); functionConfiguration.setSupportFaceDetect(true); functionConfiguration.setSupportFaceRecognition(true); functionConfiguration.setSupportLiveness(true); engineConfiguration.setFunctionConfiguration(functionConfiguration); //初始化引擎 errorCode = faceEngine.init(engineConfiguration); if (errorCode != ErrorInfo.MOK.getValue()) { System.out.println(\"初始化引擎失败\"); }else{ System.out.println(\"初始化引擎成功\"); } } /** * @param: imgPath * @description: 解码 * @return: byte[] * @date: 2020/4/24 */ public static byte[] baseData(String imgPath){ BASE64Decoder decoder = new BASE64Decoder(); byte[] bytes = new byte[0]; try { bytes = decoder.decodeBuffer(imgPath); } catch (IOException e) { e.printStackTrace(); } return bytes; } /** * @param: imgPath * @description: 图像流人脸检测 * @return: void * @date: 2020/4/24 */ public static void imageInfoFlow(String imgPath){ byte[] bytes = baseData(imgPath); imageInfo = getRGBData(bytes); errorCode = faceEngine.detectFaces(imageInfo.getImageData(), imageInfo.getWidth(), imageInfo.getHeight(), imageInfo.getImageFormat(), faceInfoList); } /** * @param: imgPath * @description: 图片人脸检测 * @return: void * @date: 2020/4/24 */ public static void imageInfo(String imgPath){ imageInfo = getRGBData(new File(\"F:\\\\IDEA\\\\workspace\\\\wanjia\\\\src\\\\main\\\\webapp\\\\upload\\\\faceimg\\\\\"+imgPath));; errorCode = faceEngine.detectFaces(imageInfo.getImageData(), imageInfo.getWidth(), imageInfo.getHeight(), imageInfo.getImageFormat(), faceInfoList); } /** * @param: * @description: 活体检测 * @return: int * @date: 2020/4/24 */ public static int liveness(){ //设置活体测试 errorCode = faceEngine.setLivenessParam(0.5f, 0.7f); //人脸属性检测 FunctionConfiguration configuration = new FunctionConfiguration(); configuration.setSupportLiveness(true); errorCode = faceEngine.process(imageInfo.getImageData(), imageInfo.getWidth(), imageInfo.getHeight(), imageInfo.getImageFormat(), faceInfoList, configuration); //活体检测 List&lt;LivenessInfo&gt; livenessInfoList = new ArrayList&lt;LivenessInfo&gt;(); errorCode = faceEngine.getLiveness(livenessInfoList); int liveness = livenessInfoList.get(0).getLiveness(); System.out.println(\"活体：\" + liveness); return liveness; } /** * @param: imgPath * @description: 检测是否存在人脸 * @return: boolean * @date: 2020/4/24 */ public static boolean findFace(String imgPath){ /*initEngine();*/ imageInfoFlow(imgPath); int isFace = 0; if(faceInfoList!=null &amp;&amp; faceInfoList.size()&gt;0){ isFace = 1; int liveness = liveness(); if(liveness == 1){ isFace = 2; } } /*errorCode = faceEngine.unInit();*/ return isFace; } /** * @param: imgPath * @param: userList * @description: 人脸比对 * @return: com.wanjia.domain.User * @date: 2020/4/24 */ public static User faces(String imgPath , List&lt;User&gt; userList){ /*initEngine();*/ imageInfoFlow(imgPath); //特征提取 FaceFeature faceFeature = new FaceFeature(); errorCode = faceEngine.extractFaceFeature(imageInfo.getImageData(), imageInfo.getWidth(), imageInfo.getHeight(), imageInfo.getImageFormat(), faceInfoList.get(0), faceFeature); System.out.println(\"特征值大小：\" + faceFeature.getFeatureData().length); float score = 0; for (User user : userList) { if(user.getFaceImg() == null){ continue; } imageInfo(user.getFaceImg()); //特征提取2 FaceFeature faceFeature2 = new FaceFeature(); if(faceInfoList!=null &amp;&amp; faceInfoList.size()&gt;0){ errorCode = faceEngine.extractFaceFeature(imageInfo.getImageData(), imageInfo.getWidth(), imageInfo.getHeight(), imageInfo.getImageFormat(), faceInfoList.get(0), faceFeature2); }else{ continue; } System.out.println(\"特征值大小：\" + faceFeature2.getFeatureData().length); //特征比对 FaceFeature targetFaceFeature = new FaceFeature(); targetFaceFeature.setFeatureData(faceFeature.getFeatureData()); FaceFeature sourceFaceFeature = new FaceFeature(); sourceFaceFeature.setFeatureData(faceFeature2.getFeatureData()); FaceSimilar faceSimilar = new FaceSimilar(); errorCode = faceEngine.compareFaceFeature(targetFaceFeature, sourceFaceFeature, faceSimilar); score = faceSimilar.getScore(); if(score &gt; 0.75f){ System.out.println(\"相似度：\" + score); /*errorCode = faceEngine.unInit();*/ return user; }else { System.out.println(\"相似度：\" + score); } } //引擎卸载 /*errorCode = faceEngine.unInit();*/ return null; } @PreDestroy public void unInit(){ errorCode = faceEngine.unInit(); System.out.println(\"引擎卸载成功\"); }} 2.4 前端界面展示userAddFace.jsp:面部信息录入 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\" pageEncoding=\"utf-8\"%&gt; &lt;%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt; &lt;title&gt;面部信息录入&lt;/title&gt; &lt;script src=\"${pageContext.request.contextPath}/layui/jquery-3.2.1.js\"&gt;&lt;/script&gt; &lt;link rel=\"stylesheet\" href=\"${pageContext.request.contextPath}/layui/css/layui.css\"&gt; &lt;script src=\"${pageContext.request.contextPath}/layui/layui.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body style=\"padding: 25px; font-size: 20px;\"&gt;&lt;center&gt; &lt;div class=\"layui-row layui-col-space10\"&gt; &lt;label class=\"layui-form-label\" style=\"width: 150px;\"&gt;登录密码：&lt;/label&gt; &lt;input type=\"password\" class=\"layui-input\" id=\"loginPwd\" lay-verify=\"required\" style=\"width: 200px;\"&gt; &lt;video id=\"video\" style=\"width: 500px;height: 380px;\"&gt;&lt;/video&gt; &lt;canvas id=\"canvas\" width=\"500\" height=\"380\" style=\"display: none;\"&gt;&lt;/canvas&gt; &lt;div class=\"layui-col-md12\" &gt; &lt;input type=\"button\" class=\"layui-btn layui-btn-fluid layui-btn-radius\" onclick=\"faceLogin()\" value=\"录入面部信息\"&gt; &lt;/div&gt; &lt;/div&gt;&lt;/center&gt;&lt;/body&gt; &lt;script type=\"text/javascript\"&gt; var video = document.getElementById('video'); var canvas = document.getElementById('canvas'); var context = canvas.getContext('2d'); var mediaStreamTrack=null; if (navigator.mediaDevices.getUserMedia) { //最新的标准API navigator.mediaDevices.getUserMedia({video : {width: 1000, height: 1000}}).then(success).catch(error); } else if (navigator.webkitGetUserMedia) { //webkit核心浏览器 navigator.webkitGetUserMedia({video : {width: 1000, height: 1000}},success, error) } else if (navigator.mozGetUserMedia) { //firfox浏览器 navigator.mozGetUserMedia({video : {width: 1000, height: 1000}}, success, error); } else if (navigator.getUserMedia) { //旧版API navigator.getUserMedia({video : {width: 1000, height: 1000}}, success, error); } function success(stream) { //兼容webkit核心浏览器 // let CompatibleURL = window.URL || window.webkitURL; //将视频流设置为video元素的源 console.log(stream); //video.src = CompatibleURL.createObjectURL(stream); video.srcObject = stream; video.play(); } //失败回调 function error(error) { console.log(\"访问用户媒体设备失败\"); } //开启摄像头 if (navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) { getUserMedia({video:{width:500,height:500}},success,error) }else{ alert('你的浏览器不支持访问用户媒体设备'); } function getFace() { context.drawImage(video,0,0,500,380); this.img=canvas.toDataURL('image/jpg'); //获取完整的base64编码 this.img=img.split(',')[1]; return this.img; } function offUserMedia() { if(mediaStreamTrack!=null) mediaStreamTrack.getTracks()[0].stop(); } function faceLogin() { layui.use('layer', function() { var layer = layui.layer;//加载layer模块 var imgpath = getFace(); var userId = '${user.userId}'; var loginPwd = $(\"#loginPwd\").val(); $.ajax({ data : { \"userId\":userId, \"loginPwd\":loginPwd, \"faceImg\":imgpath }, type : \"post\", dataType : 'json', url : \"${pageContext.request.contextPath}/userAction_addFace\", success : function(data) { if (data.code == 200) { layer.msg(\"面部信息录入成功\",{icon:1,time:1000},function(){ window.parent.location.reload(); }); }else if(data.code==100){ layer.msg(\"登录密码输入错误\",{icon:2,time:1000},function(){ $(\"#loginPwd\").val(\"\"); }); }else if(data.code==400) { layer.msg(\"未识别到人脸\",{icon:2,time:1000}); }else if(data.code==300) { layer.msg(\"活体检测未通过\",{icon:2,time:1000}); }else { layer.msg(\"面部信息录入失败\",{icon:2,time:1000}); } } }); }); } &lt;/script&gt;&lt;/html&gt; faceLogin.jsp:刷脸登录 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213&lt;%@ page language=\"java\" contentType=\"text/html; charset=utf-8\" pageEncoding=\"utf-8\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;&lt;title&gt;万家登录&lt;/title&gt;&lt;script src=\"${pageContext.request.contextPath}/layui/jquery-3.2.1.js\"&gt;&lt;/script&gt;&lt;link rel=\"stylesheet\" href=\"${pageContext.request.contextPath}/layui/css/layui.css\"&gt;&lt;script src=\"${pageContext.request.contextPath}/layui/layui.js\"&gt;&lt;/script&gt;&lt;style type='text/css'&gt;#code { font-family: Arial, 宋体; font-style: italic; color: green; border: 0; padding: 2px 3px; letter-spacing: 3px; font-weight: bolder; font-size: 25px;}&lt;/style&gt;&lt;/head&gt;&lt;body style=\"text-align: center\"&gt; &lt;!--------------------------导航栏----------------------------&gt; &lt;ul class=\"layui-nav layui-bg-cyan\"&gt; &lt;li class=\"layui-nav-item\"&gt;&lt;a href=\"javascript:;\" style=\"font-size: 30px;font-weight: bold; font-family:楷体;\"&gt;万家&lt;/a&gt;&lt;/li&gt; &lt;li class=\"layui-nav-item\"&gt;&lt;a href=\"${pageContext.request.contextPath}/page_indexUI\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li class=\"layui-nav-item\"&gt;&lt;a href=\"${pageContext.request.contextPath}/userUI_login\"&gt;密码登录&lt;/a&gt;&lt;/li&gt; &lt;li class=\"layui-nav-item layui-this\"&gt;&lt;a href=\"${pageContext.request.contextPath}/userUI_faceLogin\"&gt;刷脸登录&lt;/a&gt;&lt;/li&gt; &lt;li class=\"layui-nav-item\"&gt;&lt;a href=\"${pageContext.request.contextPath}/userUI_register\"&gt;注册&lt;/a&gt;&lt;/li&gt; &lt;li class=\"layui-nav-item\"&gt;&lt;i class=\"layui-icon layui-icon-cellphone\" style=\"color: #FFFFFF; margin-left: 100px;\"&gt;&lt;/i&gt;咨询电话：029-88888888&lt;/li&gt; &lt;/ul&gt; &lt;!--------------------------轮播图----------------------------&gt; &lt;div class=\"layui-carousel\" id=\"test1\" style=\"z-index: -1;\"&gt; &lt;div carousel-item&gt; &lt;div&gt; &lt;img src=\"img/1.jpg\"&gt; &lt;/div&gt; &lt;div&gt; &lt;img src=\"img/2.jpg\"&gt; &lt;/div&gt; &lt;div&gt; &lt;img src=\"img/3.jpg\"&gt; &lt;/div&gt; &lt;div&gt; &lt;img src=\"img/4.jpg\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--------------------------登录框----------------------------&gt; &lt;div class=\"layui-row layui-col-space30\" style=\"margin-top: -600px;\"&gt; &lt;!-- 占4格，往右移动4格（等于在中间），背景色灰色 --&gt; &lt;div class=\"layui-col-md4 layui-col-md-offset4 layui-bg-gray layui-anim layui-anim-scale\"&gt; &lt;!-- 标题占12格 --&gt; &lt;div class=\"layui-row\"&gt; &lt;div class=\"layui-col-md12\"&gt; &lt;h1&gt; &lt;i class=\"layui-icon layui-icon-release\" style=\"font-size: 40px; color: #2F4056; margin-right: 10px;\"&gt;&lt;/i&gt;万家 LoginPage &lt;/h1&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 两个占12格表单 --&gt; &lt;div class=\"layui-row layui-col-space10\"&gt; &lt;div class=\"layui-col-md12\"&gt; &lt;video id=\"video\" class=\"layui-col-md12\"&gt;&lt;/video&gt; &lt;canvas id=\"canvas\" width=\"514\" height=\"370\" style=\"display: none;\"&gt;&lt;/canvas&gt; &lt;/div&gt; &lt;div class=\"layui-col-md12\" &gt; &lt;input type=\"button\" class=\"layui-btn layui-btn-fluid layui-btn-radius\" onclick=\"faceLogin()\" value=\"登录\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--------------------------底部----------------------------&gt; &lt;div class=\"layui-container\" style=\"background-color: #FFFFFF; margin-top: 150px;\"&gt; &lt;span class=\"layui-breadcrumb\" lay-separator=\"|\"&gt; &lt;a href=\"javascript:;\"&gt;© 万家 租房&lt;/a&gt; &lt;a href=\"javascript:;\"&gt;娱乐&lt;/a&gt; &lt;a href=\"javascript:;\"&gt;八卦&lt;/a&gt; &lt;a href=\"javascript:;\"&gt;体育&lt;/a&gt; &lt;a href=\"javascript:;\"&gt;搞笑&lt;/a&gt; &lt;a href=\"javascript:;\"&gt;视频&lt;/a&gt; &lt;a href=\"javascript:;\"&gt;游戏&lt;/a&gt; &lt;a href=\"javascript:;\"&gt;综艺&lt;/a&gt; &lt;/span&gt; &lt;/div&gt; &lt;script&gt; //注意：导航 依赖 element 模块，否则无法进行功能性操作 layui.use('element', function() { var element = layui.element; }); layui.use('carousel', function() { var carousel = layui.carousel; //建造实例 carousel.render({ elem : '#test1', width : '100%', height : '700px', anim : 'fade', indicator : 'none', arrow : 'none' }); }); var video = document.getElementById('video'); var canvas = document.getElementById('canvas'); var context = canvas.getContext('2d'); var mediaStreamTrack=null; if (navigator.mediaDevices.getUserMedia) { //最新的标准API navigator.mediaDevices.getUserMedia({video : {width: 1000, height: 1000}}).then(success).catch(error); } else if (navigator.webkitGetUserMedia) { //webkit核心浏览器 navigator.webkitGetUserMedia({video : {width: 1000, height: 1000}},success, error) } else if (navigator.mozGetUserMedia) { //firfox浏览器 navigator.mozGetUserMedia({video : {width: 1000, height: 1000}}, success, error); } else if (navigator.getUserMedia) { //旧版API navigator.getUserMedia({video : {width: 1000, height: 1000}}, success, error); } function success(stream) { //兼容webkit核心浏览器 // let CompatibleURL = window.URL || window.webkitURL; //将视频流设置为video元素的源 console.log(stream); //video.src = CompatibleURL.createObjectURL(stream); video.srcObject = stream; video.play(); } //失败回调 function error(error) { console.log(\"访问用户媒体设备失败\"); } //开启摄像头 if (navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) { getUserMedia({video:{width:500,height:500}},success,error) }else{ alert('你的浏览器不支持访问用户媒体设备'); } function getFace() { context.drawImage(video,0,0,514,370); this.img=canvas.toDataURL('image/jpg') //获取完整的base64编码 this.img=img.split(',')[1]; return this.img; } function offUserMedia() { if(mediaStreamTrack!=null) mediaStreamTrack.getTracks()[0].stop(); } function faceLogin() { layui.use('layer', function() { var layer = layui.layer;//加载layer模块 var imgpath = getFace(); $.ajax({ data : { \"faceImg\":imgpath }, type : \"post\", dataType : 'json', url : \"${pageContext.request.contextPath}/userAction_jsonLogin\", success : function(data) { if (data.code == 200) { if (data.type == 3) { layer.msg(\"欢迎您管理员\"+data.data.loginName,{icon:1,time:1000},function(){ window.location.href=\"${pageContext.request.contextPath}/page_adminUI\"; }); }else if(data.type == 2){ layer.msg(\"欢迎您房主\"+data.data.loginName,{icon:1,time:1000},function(){ if(data.info == 100){ layer.msg(\"有租户房屋已到期，请及时处理\",{icon:1,time:1000},function (){ window.location.href=\"${pageContext.request.contextPath}/page_admin\"; }); }else{ window.location.href=\"${pageContext.request.contextPath}/page_admin\"; } }); }else{ layer.msg(\"欢迎您租户\"+data.data.loginName,{icon:1,time:1000},function(){ if(data.info == 100){ layer.msg(\"您有房屋已到期，请及时处理\",{icon:1,time:1000},function(){ window.location.href=\"${pageContext.request.contextPath}/page_indexUI\"; }); }else{ window.location.href=\"${pageContext.request.contextPath}/page_indexUI\"; } }); } } else if(data.code == 400) { layer.msg(\"未检测到人脸\",{icon:2,time:1000}); } else if(data.code == 300) { layer.msg(\"活体检测未通过\",{icon:2,time:1000}); } else { layer.msg(\"刷脸登录失败：面部识别不匹配\",{icon:2,time:1000}); } } }); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 前端界面展示的js和css下载：LayUI 2.5 测试面部信息录入界面展示： 登录界面展示： 到此，人脸识别整合系统登录完成。","link":"/2020/04/13/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E7%A6%BB%E7%BA%BFSDK%E6%95%B4%E5%90%88%E7%B3%BB%E7%BB%9F%EF%BC%88%E8%99%B9%E8%BD%AF%EF%BC%89/"},{"title":"小白初入Hexo","text":"1 前言使用github + hexo搭建个人博客，需要进行一定的步骤： 安装Git 安装Node.js 安装Hexo GitHub创建个人仓库 生成SSH添加到GitHub 将hexo部署到GitHub 更换主题 发布文章 hexo常用命令 2 搭建hexo博客2.1 安装GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 windows：到git官网上进行下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。 linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码 1sudo apt-get install git 安装好后，用git -version 来查看一下版本 2.2 安装node.jsHexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。 windows：node.js选择LTS版本就行了。 linux： 12sudo apt-get install nodejssudo apt-get install npm 安装完后，打开命令行 12node -vnpm -v 检查一下有没有安装成功 顺便提醒一下，windows在git安装完后，就可以直接使用git bash来敲命令行了。 2.3 安装hexo前面git和node.js安装好后，就可以安装hexo了，你可以先创建一个文件夹floder，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 输入命令 1npm install -g hexo-cli 依旧用hexo -v查看一下版本 至此就全部安装完了。 接下来初始化一下hexo 1hexo init “floder” 这个floder可以自己取什么名字都行，然后 12cd “floder” //进入文件夹npm install 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 ** _config.yml: 博客的配置文件** 12hexo generate //简化hexo ghexo server //简化hexo s 打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了（由于刚开始没有主题或index.html，出现白屏属于正常现象），使用ctrl+c可以把服务关掉。 2.4 GitHub创建个人仓库首先，你先要有一个GitHub账户，去注册一个吧。 注册完登录后，在GitHub.com中看到一个New repository，新建仓库。 创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是http://yourname.github.io，其中yourname就是你注册GitHub的用户名。 点击create repository。 2.5 生成SSH添加到GitHub回到你的git bash中， 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。 可以用以下两条，检查一下你有没有输对 12git config user.namegit config user.email 然后创建SSH,连续三次回车 1ssh-keygen -t rsa -C &quot;youremail&quot; 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的id_rsa.pub里面的信息复制进去。 在gitbash中，查看是否成功 1ssh -T git@github.com 2.6 将hexo部署到GitHub这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为 YourgithubName就是你的GitHub账户 1234deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 1npm install hexo-deployer-git --save 然后 123hexo cleanhexo generatehexo deploy 其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写 hexo deploy 部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了！！ 2.7 更换主题这里我们首先要下载主题，推荐一种我是用的主题icarus（hexo-theme-icarus） 页面预览： 将文件下载解压后放到hexo项目中的themes文件夹里。 现在需要更改配置文件，首先要知道在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：F:\\IDEA\\gitProject\\blog\\myblog_config.yml），主要包含 Hexo 本身整站的配置；另一份位于主题目录（F:\\IDEA\\gitProject\\blog\\myblog\\themes\\icarus_config.yml）下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件。下面我们先来看看站点配置文件的配置修改。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site#主页标题title: 程序员的江湖#副标题subtitle: 'xx的博客'# 网站描述description: '互联网行业新知，终身学习践行者'keywords:#作者，左下角显示author: 姓名#设置头像avatar: /images/xx.jpg#语言language: zh-CNtimezone: ''# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'#填自己的github pages网址url: http://yourname.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: enable: true # Open external links in new tab field: site # Apply to the whole site exclude: ''filename_case: 0render_drafts: falsepost_asset_folder: false #发布图片需要改为true，后面有说明relative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace: '' wrap: true hljs: false# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## Use post's date for updated date unless set in front-matteruse_date_for_updated: false# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Include / Exclude file(s)## include:/exclude: options only apply to the 'source/' folderinclude:exclude:ignore:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/# 主题切换（在themes文件夹里）theme: icarus# Deployment## Docs: https://hexo.io/docs/deployment.html#自己的仓库deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master 下面是icarus的主题配置文件.config_xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260# Version of the Icarus theme that is currently usedversion: 2.6.0# Path or URL to the website's iconfavicon: /images/favicon.svg# Additional HTML meta tags in an array.meta: # canonical_url of your sitecanonical_url: # language# Path or URL to RSS atom.xmlrss: # Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/logo.svg# Open Graph metadata# https://hexo.io/docs/helpers.html#open-graphopen_graph: # Facebook App ID fb_app_id: # Facebook Admin ID fb_admins: # Twitter ID twitter_id: # Twitter site twitter_site: # Google+ profile link google_plus: # Navigation bar link settingsnavbar: # Navigation bar menu links menu: 主页: / 归档: /archives 分类: /categories 标签: /tags 关于: /about # Navigation bar links to be shown on the right links: Download on GitHub: icon: fab fa-github url: 'https://github.com/ppoffice/hexo-theme-icarus'# Footer section link settingsfooter: # Links to be shown on the right of the footer section links: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution 4.0 International: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' Download on GitHub: icon: fab fa-github url: 'https://github.com/yourname'# Article display settingsarticle: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-light # Show code copying button clipboard: true # Default folding status of the code blocks. Can be \"\", \"folded\", \"unfolded\" fold: unfolded # Whether to show article thumbnail images thumbnail: true # Whether to show estimate article reading time readtime: true# Search plugin settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Searchsearch: # Name of the search plugin type: insight# Comment plugin settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Commentcomment: # Name of the comment plugin type: valine enable: true app_id: xxx app_key: xxx notify: false verify: false avatar: \"mm\" placeholder: 要不要说点啥... shortname: # Donation entries# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donationdonate: - # Donation entry name type: alipay # Qrcode image URL支付宝二维码 qrcode: '/images/xxx.jpg' - # Donation entry name type: wechat # Qrcode image URL微信二维码 qrcode: '/images/xxx.jpg'# Share plugin settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Shareshare: # Share plugin name type: sharejs # Sidebar settings.# Please be noted that a sidebar is only visible when it has at least one widgetsidebar: # left sidebar settings left: # Whether the left sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false # right sidebar settings right: # Whether the right sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false# Sidebar widget settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: 姓名 # Title of the author to be shown in the profile widget author_title: Java软件开发工程师 # Author's current location to be shown in the profile widget location: 陕西 西安 # Path or URL to the avatar to be shown in the profile widget avatar: /images/fh.jpg # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: false # Path or URL for the follow button follow_link: 'https://github.com/yourname' # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: 'https://github.com/yourname' Facebook: icon: fab fa-facebook url: 'https://facebook.com' Twitter: icon: fab fa-twitter url: 'https://twitter.com' Dribbble: icon: fab fa-dribbble url: 'https://dribbble.com' RSS: icon: fas fa-rss url: / - # Widget name type: toc # Where should the widget be placed, left or right position: left - # Widget name type: links # Where should the widget be placed, left or right position: left # Links to be shown in the links widget links: Hexo: 'https://hexo.io' PPOffice: 'https://github.com/ppoffice' - # Widget name type: category # Where should the widget be placed, left or right position: left - # Widget name type: tagcloud # Where should the widget be placed, left or right position: left - # Widget name type: recent_posts # Where should the widget be placed, left or right position: right - # Widget name type: archive # Where should the widget be placed, left or right position: right - # Widget name type: tag # Where should the widget be placed, left or right position: right# Other plugin settingsplugins: # Enable page animations animejs: true # Enable the lightGallery and Justified Gallery plugins # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/gallery-plugin/ gallery: true # Enable the Outdated Browser plugin # http://outdatedbrowser.com/ outdated-browser: true # Enable the MathJax plugin # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/mathjax-plugin/ mathjax: true # Show the back to top button on mobile devices back-to-top: true # Google Analytics plugin settings # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Google-Analytics google-analytics: # Google Analytics tracking id tracking_id: # Baidu Analytics plugin settings # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Baidu-Analytics baidu-analytics: # Baidu Analytics tracking id tracking_id: # Hotjar user feedback plugin # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Hotjar hotjar: # Hotjar site id site_id: # Show a loading progress bar at top of the page progressbar: true # BuSuanZi site/page view counter # https://busuanzi.ibruce.info busuanzi: truebusuanzi: enable: true# CDN provider settings# https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: 访客数 site_uv_footer: 人 # custom pv span for the whole site site_pv: true site_pv_header: 总访问量 site_pv_footer: 次 # custom pv span for one page only page_pv: true page_pv_header: &lt;i class=\"fa fa-file-o\"&gt;&lt;/i&gt; 阅读数 page_pv_footer:# CDN provider settings# https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/providers: # Name or URL of the JavaScript and/or stylesheet CDN provider cdn: jsdelivr # Name or URL of the webfont CDN provider fontcdn: google # Name or URL of the webfont Icon CDN provider iconcdn: fontawesome 效果预览： 2.8 发布文章定位到我们的hexo根目录，执行命令： 1hexo new 'myblog' hexo会帮我们在_posts下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。 一般完整格式如下： 12345678---title: postName #文章页面上的显示名称，一般是中文date: 2020-04-01 9:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文 那么hexo new page ‘postName’命令和hexo new ‘postName’有什么区别呢？ 1hexo new page \"myblog1\" 生成如下： 最终部署时生成：hexo\\public\\myblog1\\index.html，但是它不会作为文章出现在博文目录。 如果文章中有图片呢？ 安装图片插件 1npm install hexo-asset-image --save 在根目录_config.yml配置文件中，修改为 post_asset_folder: true。新建文章blog时，这个时候会生成一个blog.md 和 blog的文件夹 12345themes _posts #文章目录 blog #blog页面中的图片 aaa.jpg #页面图片 blog.md #blog页面 然后就可以在文章中引用了图片了，比如：aaa.jpg文章中的引用方法是 1{% asset_img aaa.jpg 图片描述 %} 这样图片显示就ok了，当然也可以存到云上呦！ 默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上即可，例如： 12345678910# 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等； 123hexo ghexo shexo d 部署上去后访问，效果如下 2.9 hexo常用命令常见命令 1234567hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 缩写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令： 12hexo s -g #生成并本地预览hexo d -g #生成并上传 到这hexo博客基本使用就已经OK了，博客中畅游吧，老铁！","link":"/2020/03/31/%E5%B0%8F%E7%99%BD%E5%88%9D%E5%85%A5Hexo/"},{"title":"第一个帖子","text":"欢迎来到Hexo！这是你的第一个帖子。查看文档了解更多信息。如果在使用Hexo时遇到任何问题，可以在疑难解答中找到答案，也可以在GitHub上询问我。 快速启动创建新帖子1$ hexo new \"My New Post\" 更多信息: Writing 运行服务器1$ hexo server 更多信息: Server 生成静态文件1$ hexo generate 更多信息: Generating 部署到远程仓库1$ hexo deploy 更多信息: Deployment","link":"/2020/03/31/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B8%96%E5%AD%90/"},{"title":"工具类","text":"1 前言简单的几个工具类 2 工具类1.Excel导入导出工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348package com.empl.mgr.utils;import com.empl.mgr.dto.EmployeesBasicInfoDto;import org.apache.poi.hssf.usermodel.*;import org.apache.poi.poifs.filesystem.POIFSFileSystem;import org.apache.poi.ss.formula.functions.T;import org.apache.poi.ss.usermodel.*;import org.apache.poi.ss.util.CellRangeAddress;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import java.io.*;import java.net.URLEncoder;import java.text.DecimalFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.List;/** * @author fenghao * @Title: ExcelUtil * @Description: Excel工具类 * @date 2020/05/0717:30 */public class ExcelUtil { /** * Excel表格导出 * @param excelData Excel表格的数据，封装为List&lt;List&lt;String&gt;&gt; * @param sheetName sheet的名字 * @param fileName 导出Excel的文件名 * @throws Exception 抛异常 */ public static void exportReportExcel(HttpServletResponse response,List&lt;List&lt;String&gt;&gt; excelData, String sheetName, String fileName) throws Exception { //声明一个工作簿 HSSFWorkbook workbook = new HSSFWorkbook(); //生成一个表格，设置表格名称 HSSFSheet sheet = workbook.createSheet(sheetName); sheet.addMergedRegion(new CellRangeAddress(0, 1, 0, 0)); sheet.addMergedRegion(new CellRangeAddress(0, 0, 1, 4)); sheet.addMergedRegion(new CellRangeAddress(0, 0, 5, 8)); sheet.addMergedRegion(new CellRangeAddress(0, 0, 9, 11)); sheet.addMergedRegion(new CellRangeAddress(0, 0, 12, 14)); sheet.addMergedRegion(new CellRangeAddress(0, 0, 15, 17)); sheet.addMergedRegion(new CellRangeAddress(0, 0, 18, 22)); sheet.addMergedRegion(new CellRangeAddress(0, 0, 23, 24)); //设置表格列宽度 sheet.setDefaultColumnWidth(12); sheet.setDefaultRowHeightInPoints(18); CellStyle style = workbook.createCellStyle(); // 设置样式 style.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex()); style.setFillPattern(FillPatternType.SOLID_FOREGROUND); style.setBorderBottom(BorderStyle.THIN); style.setBorderLeft(BorderStyle.THIN); style.setBorderRight(BorderStyle.THIN); style.setBorderTop(BorderStyle.THIN); style.setAlignment(HorizontalAlignment.CENTER); style.setVerticalAlignment(VerticalAlignment.CENTER); // 生成一个字体 Font font = workbook.createFont(); font.setColor(IndexedColors.BLACK.getIndex()); font.setFontHeightInPoints((short) 10); font.setBold(true); // 把字体应用到当前的样式 style.setFont(font); // 生成并设置第二个样式 CellStyle style2 = workbook.createCellStyle(); style2.setFillForegroundColor(IndexedColors.WHITE.getIndex()); style2.setFillPattern(FillPatternType.SOLID_FOREGROUND); style2.setBorderBottom(BorderStyle.THIN); style2.setBorderLeft(BorderStyle.THIN); style2.setBorderRight(BorderStyle.THIN); style2.setBorderTop(BorderStyle.THIN); style2.setAlignment(HorizontalAlignment.CENTER); style2.setVerticalAlignment(VerticalAlignment.CENTER); // 生成第二种字体 Font font2 = workbook.createFont(); font2.setFontHeightInPoints((short) 8); // 把字体应用到当前的样式 style2.setFont(font2); // 生成并设置第三个样式 CellStyle style3 = workbook.createCellStyle(); style3.setFillForegroundColor(IndexedColors.CORAL.getIndex()); style3.setFillPattern(FillPatternType.SOLID_FOREGROUND); style3.setBorderBottom(BorderStyle.THIN); style3.setBorderLeft(BorderStyle.THIN); style3.setBorderRight(BorderStyle.THIN); style3.setBorderTop(BorderStyle.THIN); style3.setAlignment(HorizontalAlignment.CENTER); style3.setVerticalAlignment(VerticalAlignment.CENTER); // 生成第三种字体 Font font3 = workbook.createFont(); font3.setColor(IndexedColors.RED.getIndex()); font3.setFontHeightInPoints((short) 9); // 把字体应用到当前的样式 style3.setFont(font3); //写入List&lt;List&lt;String&gt;&gt;中的数据 int rowIndex = 0; for(List&lt;String&gt; data : excelData){ //创建一个row行，然后自增1 HSSFRow row = sheet.createRow(rowIndex++); //遍历添加本行数据 for (int i = 0; i &lt; data.size(); i++) { //创建一个单元格 HSSFCell cell = row.createCell(i); if(rowIndex == 1 || rowIndex == 2){ cell.setCellStyle(style); } else if(rowIndex == excelData.size()) { cell.setCellStyle(style3); } else { cell.setCellStyle(style2); } //创建一个内容对象 HSSFRichTextString text = new HSSFRichTextString(data.get(i)); //将内容对象的文字内容写入到单元格中 cell.setCellValue(text); } } //输出流 OutputStream output = response.getOutputStream(); response.setContentType(\"application/vnd.ms-excel\"); fileName = URLEncoder.encode(fileName, \"UTF-8\"); //设置导出Excel的名称 response.setHeader(\"Content-disposition\", \"attachment;filename=\" + fileName); /*FileOutputStream output = new FileOutputStream( \"D:\\\\\"+fileName);*/ //workbook将Excel写入到response的输出流中，供页面下载该Excel文件 workbook.write(output); output.close(); //关闭workbook workbook.close(); } /** * Excel表格导出 * @param response HttpServletResponse对象 * @param excelData Excel表格的数据，封装为List&lt;List&lt;String&gt;&gt; * @param sheetName sheet的名字 * @param fileName 导出Excel的文件名 * @throws Exception 抛异常 */ public static void exportExcel(HttpServletResponse response, List&lt;List&lt;String&gt;&gt; excelData, String sheetName, String fileName) throws Exception { //声明一个工作簿 HSSFWorkbook workbook = new HSSFWorkbook(); //生成一个表格，设置表格名称 HSSFSheet sheet = workbook.createSheet(sheetName); //设置表格列宽度 sheet.setDefaultColumnWidth(18); sheet.setDefaultRowHeightInPoints(22); CellStyle style = style(workbook); // 生成并设置另一个样式 内容的背景 CellStyle style2 = style2(workbook,0); //写入List&lt;List&lt;String&gt;&gt;中的数据 int rowIndex = 0; for(List&lt;String&gt; data : excelData){ //创建一个row行，然后自增1 HSSFRow row = sheet.createRow(rowIndex++); //遍历添加本行数据 for (int i = 0; i &lt; data.size(); i++) { //创建一个单元格 HSSFCell cell = row.createCell(i); if(rowIndex == 1){ cell.setCellStyle(style); } else { cell.setCellStyle(style2); } //创建一个内容对象 HSSFRichTextString text = new HSSFRichTextString(data.get(i)); //将内容对象的文字内容写入到单元格中 cell.setCellValue(text); } } //输出流 OutputStream output = response.getOutputStream(); response.setContentType(\"application/vnd.ms-excel\"); fileName = URLEncoder.encode(fileName, \"UTF-8\"); //设置导出Excel的名称 response.setHeader(\"Content-disposition\", \"attachment;filename=\" + fileName); /*FileOutputStream output = new FileOutputStream( \"D:\\\\\"+fileName);*/ //workbook将Excel写入到response的输出流中，供页面下载该Excel文件 workbook.write(output); output.close(); //关闭workbook workbook.close(); } public static CellStyle style2(HSSFWorkbook workbook,int type){ CellStyle style2 = workbook.createCellStyle(); style2.setFillForegroundColor(IndexedColors.WHITE.getIndex()); style2.setFillPattern(FillPatternType.SOLID_FOREGROUND); style2.setBorderBottom(BorderStyle.THIN); style2.setBorderLeft(BorderStyle.THIN); style2.setBorderRight(BorderStyle.THIN); style2.setBorderTop(BorderStyle.THIN); style2.setAlignment(HorizontalAlignment.CENTER); style2.setVerticalAlignment(VerticalAlignment.CENTER); // 生成另一个字体 Font font2 = workbook.createFont(); if(type == 1){ font2.setColor(IndexedColors.RED.getIndex()); } font2.setFontHeightInPoints((short) 10); // 把字体应用到当前的样式 style2.setFont(font2); return style2; } public static CellStyle style(HSSFWorkbook wb){ CellStyle style = wb.createCellStyle(); // 设置样式 style.setFillForegroundColor(IndexedColors.GOLD.getIndex()); style.setFillPattern(FillPatternType.SOLID_FOREGROUND); style.setBorderBottom(BorderStyle.THIN); style.setBorderLeft(BorderStyle.THIN); style.setBorderRight(BorderStyle.THIN); style.setBorderTop(BorderStyle.THIN); style.setAlignment(HorizontalAlignment.CENTER); style.setVerticalAlignment(VerticalAlignment.CENTER); // 生成一个字体 Font font = wb.createFont(); font.setColor(IndexedColors.BLACK.getIndex()); font.setFontHeightInPoints((short) 12); font.setBold(true); // 把字体应用到当前的样式 style.setFont(font); return style; } public static String[][] getArrData(File file, int ignoreRows) throws IOException { List&lt;String[]&gt; result = new ArrayList&lt;String[]&gt;(); int rowSize = 0; BufferedInputStream in = new BufferedInputStream(new FileInputStream(file)); // 打开HSSFWorkbook POIFSFileSystem fs = new POIFSFileSystem(in); HSSFWorkbook wb = new HSSFWorkbook(fs); HSSFCell cell = null; for (int sheetIndex = 0; sheetIndex &lt; wb.getNumberOfSheets(); sheetIndex++) { HSSFSheet st = wb.getSheetAt(0); // 第一行为标题，不取 for (int rowIndex = ignoreRows; rowIndex &lt;= st.getLastRowNum(); rowIndex++) { HSSFRow row = st.getRow(rowIndex); if (row == null) { continue; } int tempRowSize = row.getLastCellNum(); if (tempRowSize &gt; rowSize) { rowSize = tempRowSize; } String[] values = new String[rowSize]; Arrays.fill(values, \"\"); boolean hasValue = false; for (short columnIndex = 0; columnIndex &lt; row.getLastCellNum(); columnIndex++) { String value = \"\"; cell = row.getCell(columnIndex); if (cell != null) { // 注意：一定要设成这个，否则可能会出现乱码 // cell.setEncoding(HSSFCell.ENCODING_UTF_16); switch (cell.getCellTypeEnum()) { case STRING: value = cell.getStringCellValue(); break; case NUMERIC: if (HSSFDateUtil.isCellDateFormatted(cell)) { Date date = cell.getDateCellValue(); if (date != null) { value = new SimpleDateFormat(\"yyyy-MM-dd\") .format(date); } else { value = \"\"; } } else { value = new DecimalFormat(\"0\").format(cell .getNumericCellValue()); } break; case FORMULA: // 导入时如果为公式生成的数据则无值 if (!cell.getStringCellValue().equals(\"\")) { value = cell.getStringCellValue(); } else { value = cell.getNumericCellValue() + \"\"; } break; case BLANK: value = \"\"; break; case ERROR: value = \"\"; break; case BOOLEAN: value = (cell.getBooleanCellValue() == true ? \"Y\" : \"N\"); break; default: value = \"\"; } } if (columnIndex == 0 &amp;&amp; value.trim().equals(\"\")) { break; } values[columnIndex] = rightTrim(value); hasValue = true; } if (hasValue) { result.add(values); } } } in.close(); String[][] returnArray = new String[result.size()][rowSize]; for (int i = 0; i &lt; returnArray.length; i++) { returnArray[i] = (String[]) result.get(i); } return returnArray; } /** * 去掉字符串右边的空格 * * @param str 要处理的字符串 * @return 处理后的字符串 */ public static String rightTrim(String str) { if (str == null) { return \"\"; } int length = str.length(); for (int i = length - 1; i &gt;= 0; i--) { if (str.charAt(i) != 0x20) { break; } length--; } return str.substring(0, length); }} 2.时间工具类package com.empl.mgr.utils;import java.math.BigDecimal;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import com.empl.mgr.constant.TimeFormatConstant;import com.empl.mgr.dto.DateDto;import org.apache.commons.lang.StringUtils;public class DateTimeUtil { /** * @param: * @description: 获取当前时间 * @return: java.util.Date * @date: 2020/5/12 */ public static Date getCurrentTime() { return new Date(); } /** * @param: date * @param: format * @description: long转String * @return: java.lang.String * @date: 2020/5/12 */ public static String conversionTime(long date, String format) { if (CompareUtil.isEmpty(date) || StringUtils.isEmpty(format)) return \"\"; return new SimpleDateFormat(format).format(new Date(date)); } /** * @param: date * @param: format * @description: Date转String * @return: java.lang.String * @date: 2020/5/12 */ public static String dateToString(Date date, String format) { if (CompareUtil.isEmpty(date) || StringUtils.isEmpty(format)) return \"\"; return new SimpleDateFormat(format).format(date); } /** * @param: date * @param: format * @description: String转Date * @return: java.util.Date * @date: 2020/5/12 */ public static Date stringToDate(String date, String format) { if (CompareUtil.isEmpty(date) || StringUtils.isEmpty(format)) return null; Date time = null; try { time = new SimpleDateFormat(format).parse(date); } catch (ParseException e) { e.printStackTrace(); } return time; } /** * @param: null * @description: 司龄计算 * @return: * @date: 2020/5/6 */ public static float seniorityTime(String date) { Date entryTime = stringToDate(date, TimeFormatConstant.YYYY_MM_DD); Date nowTime = getCurrentTime(); long dayNum = nowTime.getTime() - entryTime.getTime(); float time = dayNum / 1000 / 60 / 60 / 24; time = time / 365.5f; float seniority = new BigDecimal(time).setScale(1, BigDecimal.ROUND_HALF_UP).floatValue(); return seniority; } /** * @param: idcard * @description: 根据身份证计算年龄 * @return: java.lang.Integer * @date: 2020/5/8 */ public static int idCardToAge(String idcard) { int selectYear = Integer.valueOf(idcard.substring(6, 10)); //出生的年份 int selectMonth = Integer.valueOf(idcard.substring(10, 12)); //出生的月份 int selectDay = Integer.valueOf(idcard.substring(12, 14)); //出生的日期 Calendar cal = Calendar.getInstance(); int yearMinus = cal.get(Calendar.YEAR) - selectYear; int monthMinus = cal.get(Calendar.MONTH) + 1 - selectMonth; int dayMinus = cal.get(Calendar.DATE) - selectDay; Integer age = yearMinus; if (yearMinus &lt; 0) { age = 0; } else if (yearMinus == 0) { age = 0; } else if (yearMinus &gt; 0) { if (monthMinus == 0) { if (dayMinus &lt; 0) { age = age - 1; } } else if (monthMinus &gt; 0) { age = age + 1; } } return age; } /** * @param: date * @param: months * @description: 获取添加月份的日期 * @return: java.lang.String * @date: 2020/5/12 */ public static String getAddMonthDate(String date, int months) { Date toDate = stringToDate(date, TimeFormatConstant.YYYY_MM_DD); Calendar cal = Calendar.getInstance(); cal.setTime(toDate); cal.add(Calendar.MONTH, months); String temp = dateToString(cal.getTime(),TimeFormatConstant.YYYY_MM_DD); return temp; } /** * @param: date * @param: days * @description: 获取添加天数的日期 * @return: java.lang.String * @date: 2020/5/12 */ public static Date getAddDayDate(String date, int days) { Date dayDate = stringToDate(date, TimeFormatConstant.YYYY_MM_DD); Calendar cal = Calendar.getInstance(); cal.setTime(dayDate); cal.add(Calendar.DATE, days); return cal.getTime(); } /** * @param: date1 * @param: dateStr2 * @param: days * @description: 时间比较 * @return: int * @date: 2020/5/13 */ public static int compareDate(Date date1, String dateStr2 ,int days) { Date date2 = getAddDayDate(dateStr2, days); if (date1.getTime() &gt; date2.getTime()){ return -1; }else if (date1.getTime() &lt; date2.getTime()){ return 1; }else{ return 0; } } /** * @param: * @description: 间隔时间 * @return: java.util.Date * @date: 2020/5/13 */ public static DateDto getDate(int months){ Calendar cal = Calendar.getInstance(); int year = cal.get(Calendar.YEAR); int month = cal.get(Calendar.MONTH)+1; int day = cal.get(Calendar.DATE); Integer[] daysArr = {31, (isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; if(daysArr[month-1] &gt; day){ cal.add(Calendar.DATE,0-day); } DateDto dto = new DateDto(); dto.setEndTime(dateToString(cal.getTime(),TimeFormatConstant.YYYY_MM_DD)); cal.add(Calendar.MONTH,0-months); dto.setStartTime(dateToString(cal.getTime(),TimeFormatConstant.YYYY_MM_DD)); return dto; } /** * @param: year * @description: 判断是否是闰年 * @return: boolean * @date: 2020/5/13 */ public static boolean isLeapYear(int year){ if(year%4 == 0 &amp;&amp; year%100!=0 || year%400 == 0){ return true; }else{ return false; } }} 3.格式校验123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146package com.empl.mgr.utils;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * @description: 校验 * @author: fenghao * @date: 2020/5/19 **/public class CheckUtil { /** * @param: phone * @description: 手机号校验 * @return: boolean * @date: 2020/5/19 */ public static boolean checkPhone(String phone) { String regex = \"^((13[0-9])|(14[0-9])|(15([0-9]))|(16([0-9]))|(17([0-9]))|(18([0-9]))|(19([0-9])))\\\\d{8}$\"; if (phone.length() != 11) { return false; } else { Pattern p = Pattern.compile(regex); Matcher m = p.matcher(phone); boolean isMatch = m.matches(); return isMatch; } } /** * @param: email * @description: 验证邮箱地址是否正确 * @return: boolean * @date: 2020/5/19 */ public static boolean checkEmail(String email){ boolean flag = false; try{ String check = \"^([a-z0-9A-Z]+[-|\\\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\\\.)+[a-zA-Z]{2,}$\"; Pattern regex = Pattern.compile(check); Matcher matcher = regex.matcher(email); flag = matcher.matches(); }catch(Exception e){ flag = false; } return flag; } /** * @param: IDNumber * @description: 身份证号校验 * @return: boolean * @date: 2020/5/19 */ public static boolean checkIdentity(String IDNumber) { if (IDNumber == null || \"\".equals(IDNumber)) { return false; } // 定义判别用户身份证号的正则表达式（15位或者18位，最后一位可以为字母） String regularExpression = \"(^[1-9]\\\\d{5}(18|19|20)\\\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\\\d{3}[0-9Xx]$)|\" + \"(^[1-9]\\\\d{5}\\\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\\\d{3}$)\"; boolean matches = IDNumber.matches(regularExpression); // 判断第18位校验值 if (matches) { if (IDNumber.length() == 18) { try { char[] charArray = IDNumber.toCharArray(); // 前十七位加权因子 int[] idCardWi = {7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2}; // 这是除以11后，可能产生的11位余数对应的验证码 String[] idCardY = {\"1\", \"0\", \"X\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"}; int sum = 0; for (int i = 0; i &lt; idCardWi.length; i++) { int current = Integer.parseInt(String.valueOf(charArray[i])); int count = current * idCardWi[i]; sum += count; } char idCardLast = charArray[17]; int idCardMod = sum % 11; if (idCardY[idCardMod].toUpperCase() .equals(String.valueOf(idCardLast).toUpperCase())) { return true; } else { System.out.println(\"身份证最后一位:\" + String.valueOf(idCardLast).toUpperCase() + \"错误,正确的应该是:\" + idCardY[idCardMod].toUpperCase()); return false; } } catch (Exception e) { e.printStackTrace(); return false; } } else { return false; } } return matches; } /** * @param: cardId * @description: 校验银行卡卡号 * @return: boolean * @date: 2020/5/27 */ public static boolean checkBankCard(String cardId) { String check = \"^([1-9]{1})(\\\\d{15}|\\\\d{18})$\"; Pattern regex = Pattern.compile(check); Matcher matcher = regex.matcher(cardId); if(!matcher.matches()){ return false; } char bit = getBankCardCheckCode(cardId.substring(0, cardId.length() - 1)); if(bit == 'N'){ return false; } return cardId.charAt(cardId.length() - 1) == bit; } /** * @param: nonCheckCodeCardId * @description: 从不含校验位的银行卡卡号采用 Luhm 校验算法获得校验位 * @return: char * @date: 2020/5/27 */ public static char getBankCardCheckCode(String nonCheckCodeCardId){ if(nonCheckCodeCardId == null || nonCheckCodeCardId.trim().length() == 0 || !nonCheckCodeCardId.matches(\"\\\\d+\")) { //如果传的不是数据返回N return 'N'; } char[] chs = nonCheckCodeCardId.trim().toCharArray(); int luhmSum = 0; for(int i = chs.length - 1, j = 0; i &gt;= 0; i--, j++) { int k = chs[i] - '0'; if(j % 2 == 0) { k *= 2; k = k / 10 + k % 10; } luhmSum += k; } return (luhmSum % 10 == 0) ? '0' : (char)((10 - luhmSum % 10) + '0'); }}","link":"/2020/05/27/%E5%B7%A5%E5%85%B7%E7%B1%BB/"}],"tags":[{"name":"Git-api","slug":"Git-api","link":"/tags/Git-api/"},{"name":"emqttd","slug":"emqttd","link":"/tags/emqttd/"},{"name":"emqttd搭建","slug":"emqttd搭建","link":"/tags/emqttd%E6%90%AD%E5%BB%BA/"},{"name":"人脸识别，SDK","slug":"人脸识别，SDK","link":"/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%EF%BC%8CSDK/"},{"name":"hexo搭建，博客","slug":"hexo搭建，博客","link":"/tags/hexo%E6%90%AD%E5%BB%BA%EF%BC%8C%E5%8D%9A%E5%AE%A2/"},{"name":"工具类","slug":"工具类","link":"/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"}],"categories":[{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"springboot","slug":"springboot","link":"/categories/springboot/"},{"name":"搭建","slug":"搭建","link":"/categories/%E6%90%AD%E5%BB%BA/"},{"name":"整合","slug":"整合","link":"/categories/%E6%95%B4%E5%90%88/"},{"name":"工具类","slug":"工具类","link":"/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"}]}